apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
            renderscriptDebuggable = true
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task cleanbuild() {
    if (getBuildDir().exists()){
        println "============clean build dir "+getBuildDir().absolutePath
        delete getBuildDir().absolutePath
    }
}

build {
    def proName = getProject().getName()
    doLast {
        println("=====================" + proName + " task build.doLast start.=======================")
        def projectDir = getProjectDir().getAbsolutePath()
        def releaseName = projectDir + "/build/outputs/libcore-release.aar"
        def debugName = projectDir + "/build/outputs/libcore-debug.aar"
        def fromFile = projectDir +"/build/outputs/" + releaseName
        def intoFile = projectDir +"/output/"
        def jarName = "libmix.jar"
        println(getName())
        println(getOwner())
        println(getDisplayName())
        println(getDescription())
        println(gradle.startParameter.taskNames)
        copy {
            from fromFile
            into intoFile
            rename {
                jarName
            }
        }

        println("=====================" + proName + " task build.doLast end.=========================")
    }
}

//tasks.whenTaskAdded { task ->
//    if (task.name.equalsIgnoreCase("assembleRelease")) {
//        // 如果是assembleRelease任务，在最后执行导出apk以及mapping目录到指定目录
//        task.doLast {
//            outputReleaseFile()
//        }
//    }
//}
//
//void outputReleaseFile() {
////    android.libraryVariant.a
//    android.applicationVariants.all { variant ->
//        // 如果是正式版打包
//        if (variant.name.equalsIgnoreCase("release")) {
//            File outputPath = new File("$rootDir" + File.separator + "release_app" + File.separator
//                    + android.defaultConfig.versionName)
//            println(variant.outputs[0].outputFile)
//            println(String.format('拷贝生成文件到指定目录[%s]', outputPath.getAbsolutePath()))
//            // 拷贝apk文件
//            copy {
//                from variant.outputs[0].outputFile
//                into outputPath
//                // 重命名导出名称
//                rename {
//                    'account_system' + variant.name + '_' + android.defaultConfig.versionName + ".apk"
//                }
//            }
//
//            // 拷贝mapping目录
//            copy {
//                from variant.mappingFile.getParentFile()
//                into new File(outputPath, 'mapping')
//            }
//        }
//    }
//}
//
////
//task copyjar(dependsOn:[':libmix:copyjar','fatJar']) {
//    doLast {
//        def rootProjectpath = getRootDir().absolutePath
//        def fileName = "dydexencry.jar"
//        def fromFile = rootProjectpath + "\\dydexencry\\build\\libs\\" + fileName
//        def intoFile = rootProjectpath + "\\pythonlaunch\\src\\main\\python"
//        // copy --> rename
//        println("=====================build.copyjar begin.=========================" + new File(fromFile).exists())
//        println(new File(fromFile).absolutePath)
//        copy {
//            from fromFile
//            into intoFile
//            rename {
//                "petershell.jar"
//            }
//        }
//        println("=====================build.copyjar end.=========================" + new File(intoFile + "\\petershell.jar").exists())
//        println(new File(intoFile + "\\petershell.jar").absolutePath)
//    }
//}
//
//task exec(dependsOn: [':dydexencry:copyjar',':app:copyapk']){
//    doLast {
//        println("begin to exec command===========================")
//        def rootpath = getRootDir().absolutePath;
//        def pyfile = rootpath + "\\pythonlaunch\\src\\main\\python\\addshell.py"
//        def sourceapk = rootpath + "\\pythonlaunch\\src\\main\\python\\demo.apk"
//        def dirDir = rootpath + "\\pythonlaunch\\src\\main\\python\\d"
//        def command = "python  " + pyfile + " -s " + sourceapk + " -o " + dirDir + " -n de.apk"
//
//        println(command)
//        command.execute()
//    }
//}

task aarRelease(type: Copy) {
    println rootProject.rootDir
}