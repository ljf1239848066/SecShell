apply plugin: 'com.android.library'

ext {
    sdkAarName = "${SDK_AAR_NAME}"
    sdkFolder = "${SDK_FOLDER}"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task cleanbuild() {
    if (getBuildDir().exists()){
        println "============clean build dir "+getBuildDir().absolutePath
        delete getBuildDir().absolutePath
    }
}

def copyFile(String fromFile, String intoDir, String fileName) {
    def intoFile = intoDir + fileName
    if (new File(intoFile).exists()) {
        delete intoFile
    }
    println("fromFile=" + fromFile + ", exists=" + (new File(fromFile).exists()))
    println("intoDir=" + intoDir)
    println("fileName=" + fileName)
    println("before copy, file=" + intoFile + ", exists=" + (new File(intoFile).exists()))
    copy {
        from fromFile
        into intoDir
        rename {
            fileName
        }
    }
    def newFile = new File(intoFile)
    println(" after copy, file=" + newFile.getAbsolutePath() + ", exists=" + newFile.exists() + ", size=" + newFile.length())
}

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        def rootDir = getRootDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
//        def aarName = "libcore-release.aar"
        def aarName = "libcore-debug.aar"
        def fromFile = buildDir +"/outputs/aar/" + aarName
        def intoDir = rootDir + File.separator + sdkFolder + File.separator
        copyFile(fromFile, intoDir, sdkAarName)
        println("=====================" + taskName + " doLast end.=========================")
    }
}