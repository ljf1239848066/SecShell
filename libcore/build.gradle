apply plugin: 'com.android.library'

ext {
    sdkJarName = "${SDK_JAR_NAME}"
    sdkDexName = "${SDK_DEX_NAME}"
    sdkMixName = "${SDK_MIX_NAME}"
    sdkFolder = "${SDK_FOLDER}"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
            renderscriptDebuggable = true
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable = true
            jniDebuggable = true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task cleanbuild() {
    if (getBuildDir().exists()){
        println "============clean build dir "+getBuildDir().absolutePath
        delete getBuildDir().absolutePath
    }
}

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        def rootDir = getRootDir().getAbsolutePath()
        def projectDir = getProjectDir().getAbsolutePath()
        def releaseName = projectDir + "/build/outputs/libcore-release.aar"
        def debugName = projectDir + "/build/outputs/libcore-debug.aar"
        def fromFile = projectDir +"/build/outputs/" + releaseName
        def intoFile = rootDir + File.separator + sdkFolder + File.separator
        def jarName = "libmix.jar"
        println(getName())
        println(getOwner())
        println(getDisplayName())
        println(getDescription())
        println(gradle.startParameter.taskNames)
        copy {
            from fromFile
            into intoFile
            rename {
                jarName
            }
        }

        println("=====================" + taskName + " doLast end.=========================")
    }
}

task aarRelease(type: Copy) {
    println rootProject.rootDir
}