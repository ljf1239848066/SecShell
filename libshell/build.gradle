apply plugin: 'com.android.library'

ext {
    sdkDexName = "${SDK_DEX_NAME}"
    sdkMixName = "${SDK_MIX_NAME}"
    sdkFolder = "${SDK_FOLDER}"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField "String", "SDK_DEX_NAME", "\"${sdkDexName}\""
        buildConfigField "String", "SDK_MIX_NAME", "\"${sdkMixName}\""

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fno-rtti -fno-exceptions"
                arguments '-DANDROID_PLATFORM=android-16',
                        '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=none'
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        //copy aar file to demo libs directory
        def rootDir = getRootDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = "libshell-debug.aar"
        def fromFile = buildDir + "/outputs/aar/" + fileName
        def sdkDir = rootDir + File.separator + sdkFolder
        def aarName = "libshell.aar"
        copy {
            from fromFile
            into sdkDir
            rename {
                aarName
            }
        }
        println("aarName=" + aarName + ", exists=" + (new File(aarName).exists()))
        println("=====================" + taskName + " doLast end.=========================")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.github.asLody:turbodex:1.1.0'
}
