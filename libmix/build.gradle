apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"

jar {
    //项目名，也是生成的jar的名字
    baseName = "libmix"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libmix.Mix' }
}

task clearJar(type: Delete) {
    println("=====================task clearJar start.=========================")
    delete 'build/libs/'
    println("=====================task clearJar start.=========================")
}

task prepare() {
    def proName = getProject().getName()
    println("=====================" + proName + " task prepare start.=========================")
    println("=====================" + proName + " task prepare end.=========================")
}

task makeJar(type: Copy, dependsOn: ':libmix:packageReleaseJar') {
    println("=====================task makeJar start.=========================")

    def projectDir = getProjectDir().getAbsolutePath()
    def buildDir = getBuildDir().getAbsolutePath()
    def fileName = jar.baseName + "-" + jar.version + ".jar"
    def fromDir = buildDir + File.separator + "libs" + File.separator
    def fromFile = fromDir + fileName
    def intoDir = projectDir + File.separator + "output" + File.separator
    def jarName = "libmix.jar"

    println("fromDir=" + fromDir)
    println("intoDir=" + intoDir)

    //copy jar file to output directory
    copy {
        from fromFile
        into intoDir
        rename {
            jarName
        }
    }
//    from(fromDir)
//    into(intoDir)
//    include(fileName)
//    rename(fileName, jarName)
    println("=====================task makeJar end.=========================")
}

task mixDex(dependsOn: ':libmix:makeJar') {
    println("=====================task mixDex start.=========================")
    def projectDir = getProjectDir().getAbsolutePath()
    def jarDir = projectDir + File.separator + "output" + File.separator
    def jarName = "libmix.jar"

    //exec command to mix dex file
    def dexName = "libcore.dex"
    def mixName = "libcore.data"
    def jarFile = jarDir + jarName
    def srcFile = jarDir + dexName
    def dstFile = jarDir + mixName
    def command = "java -jar " + jarFile + " -en -s " + srcFile + " -d " + dstFile
    println("command:" + command)
    command.execute()

    //copy mixed dex file to project(:libshell)
    def intoDir = getRootDir().getAbsolutePath() + "/libshell/src/main/assets/"
    copy {
        from dstFile
        into intoDir
        rename {
            mixName
        }
    }
    println("=====================task mixDex end.=========================")
}

//makeJar.dependsOn(clearJar, packageReleaseJar)

build {
    doLast {
        println("=====================build.doLast start.=========================")
        def projectDir = getProjectDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def fromDir = buildDir + File.separator + "libs" + File.separator
        def fromFile = fromDir + fileName
        def intoDir = projectDir + File.separator + "output" + File.separator
        def jarName = "libmix.jar"

        println("fromDir=" + fromDir)
        println("intoDir=" + intoDir)

        //copy jar file to output directory
        copy {
            from fromFile
            into intoDir
            rename {
                jarName
            }
        }

        //exec command to mix dex file
        def dexName = "libcore.dex"
        def mixName = "libcore.data"
        def jarFile = jarDir + jarName
        def srcFile = jarDir + dexName
        def dstFile = jarDir + mixName
        def command = "java -jar " + jarFile + " -en -s " + srcFile + " -d " + dstFile
        println("command:" + command)
        command.execute()

        //copy mixed dex file to project(:libshell)
        intoDir = getRootDir().getAbsolutePath() + "/libshell/src/main/assets/"
        copy {
            from dstFile
            into intoDir
            rename {
                mixName
            }
        }
        println("=====================build.doLast success.=========================")
    }
}
