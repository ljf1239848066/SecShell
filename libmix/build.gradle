apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"

ext {
    sdkJarName = "${SDK_JAR_NAME}"
    sdkDexName = "${SDK_DEX_NAME}"
    sdkMixName = "${SDK_MIX_NAME}"
    sdkFolder = "${SDK_FOLDER}"
}

jar {
    //项目名，也是生成的jar的名字
    baseName = "libmix"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libmix.Mix' }
}

task clearJar(type: Delete) {
    println("=====================task clearJar start.=========================")
    delete 'build/libs/'
    println("=====================task clearJar start.=========================")
}

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        def rootDir = getRootDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def fromDir = buildDir + File.separator + "libs" + File.separator
        def fromFile = fromDir + fileName
        def jarDir = rootDir + File.separator + sdkFolder + File.separator
        def jarName = "libmix.jar"

        println("fromDir=" + fromDir)
        println("jarDir=" + jarDir)

        //copy jar file to output directory
        copy {
            from fromFile
            into jarDir
            rename {
                jarName
            }
        }

        //exec command to mix dex file
        def dexName = "libcore.dex"
        def mixName = "libcore.data"
        def jarFile = jarDir + jarName
        def srcFile = jarDir + dexName
        def dstFile = jarDir + mixName
        def command = "java -jar " + jarFile + " -en -s " + srcFile + " -d " + dstFile
        println("command:" + command)
        command.execute()

        //copy mixed dex file to project(:libshell)
        def intoDir = getRootDir().getAbsolutePath() + "/libshell/src/main/assets/"
        println("dstFile=" + dstFile)
        println("intoDir=" + intoDir)
        println("mixName=" + mixName)
        copy {
            from dstFile
            into intoDir
            rename {
                mixName
            }
        }
        def mixFile = new File(intoDir + mixName)
        println("mixFile=" + mixFile.getAbsolutePath() + ", exists=" + mixFile.exists())
        println("=====================" + taskName + " doLast end.=========================")
    }
}
