apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"

jar {
    //项目名，也是生成的jar的名字
    baseName = "libmix"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libmix.Mix' }
}

build {
    doLast {
        //copy jar file to output directory
        def projectDir = getProjectDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def fromFile = buildDir + File.separator + "libs" + File.separator + fileName
        def intoDir = projectDir + File.separator + "output" + File.separator
        def jarName = "libmix.jar"
        println("=====================build.doLast start.=========================")
        copy {
            from fromFile
            into intoDir
            rename {
                jarName
            }
        }

        //exec command to mix dex file
        def dexName = "libcore.dex"
        def mixName = "libcore.data"
        def outJar = intoDir + jarName
        def srcFile = intoDir + dexName
        def dstFile = intoDir + mixName
        def command = "java -jar " + outJar + " -en -s " + srcFile + " -d " + dstFile
        println("command:" + command)
        command.execute()

        //copy mixed dex file to project(:dexinjector)
        new File()
        intoDir = getRootDir().getAbsolutePath() + "/dexinjector/src/main/assets/"
        copy {
            from dstFile
            into intoDir
            rename {
                mixName
            }
        }
        println("=====================build.doLast success.=========================")
    }
}
//
//task copyjar(dependsOn: ['packageRelease']) {
//    doLast {
//        def rootProjectpath = getRootDir().absolutePath
//
//        def fileName = "libmix-1.0.jar"
//        def newName = "libmix.jar"
//        def fromFile = rootProjectpath + "\\libmix\\build\\libs\\" + fileName
//        def intoFile = rootProjectpath + "\\libmix\\output\\" + fileName
//        // copy --> rename
//        println("=====================build.copyjar begin.=========================" + new File(fromFile).exists())
//        println(new File(fromFile).absolutePath)
//        copy {
//            from fromFile
//            into intoFile
//            rename {
//                newName
//            }
//        }
//        println("=====================build.copyjar end.=========================" + new File(intoFile).exists())
//        println(new File(intoFile + fileName).absolutePath)
//    }
//}