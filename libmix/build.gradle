apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"

ext {
    sdkAarName = "${SDK_AAR_NAME}"
    sdkJarName = "${SDK_JAR_NAME}"
    sdkDexName = "${SDK_DEX_NAME}"
    sdkMixName = "${SDK_MIX_NAME}"
    sdkFolder = "${SDK_FOLDER}"
    shellAarName = "${SHELL_NAME}"
    demoLibFolder = "${DEMO_LIB_FOLDER}"
    dex2jarDir = "${DEX2JAR_TOOL_FOLDER}"
    mkstubsConf = "${MKSTUBS_CONF}"
}

jar {
    //项目名，也是生成的jar的名字
    baseName = "libmix"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libmix.Mix' }
}

task clearJar(type: Delete) {
    println("=====================task clearJar start.=========================")
    delete 'build/libs/'
    println("=====================task clearJar start.=========================")
}

def isWindows() {
//    return System.properties['os.name'].contains('windows')
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

String pathJoin(String path1, String path2) {
    def a = path1.endsWith(File.separator)
    def b = path2.startsWith(File.separator)
    if (a && b) {
        return path1 + path2.substring(1)
    } else if (a != b) {
        return path1 + path2
    } else {
        return path1 + File.separator + path2
    }
}

def unzip(String jar, String libs, String zipFile, String outPath) {
    def cmd = "java -jar -Djava.ext.dirs=" + libs + " " + jar + " unzip " + zipFile + " " + outPath
    println("command:" + cmd)
    println(cmd.execute().text.trim())
}

def jar2dex(String d2jPath, String jarFile, String dexFile) {
    def dex = new File(dexFile)
    if (dex.exists()) {
        dex.delete()
    }
    def cmd = d2jPath + " " + jarFile + " -o " + dexFile + " --force"
    println("command:" + cmd)
    cmd.execute()
}

def jar2stub(String jar, String libs, String conf, String inputJar, String outputJar) {
    def cmd = "java -jar -Djava.ext.dirs=" + libs + " " + jar + " " + inputJar + " " + outputJar
    if (conf.empty) {
        cmd += " +*"
    } else {
        cmd += " @" + conf
    }
    println("command:" + cmd)
    println(cmd.execute().text.trim())
}

def copyFile(String fromFileName, String intoDir, String fileName, boolean waitSrc) {
    def fromFile = new File(fromFileName)
    if (waitSrc) {
        def count = 0
        while (!fromFile.exists() && count < 5) {
            count++
            sleep(1000)
        }
    }
    if (!fromFile.exists()) {
        println("copyFile error: fromFile:" + fromFile.getAbsolutePath() + " is not exists")
        return
    }
    def intoFileName = pathJoin(intoDir, fileName)
    def intoFile = new File(intoFileName)
    if (intoFile.exists()) {
        intoFile.delete()
    }
    println("fromFile=" + fromFileName)
    println("intoDir=" + intoDir)
    println("fileName=" + fileName)
    println("before copy, file=" + intoFile.getAbsolutePath() + ", exists=" + intoFile.exists())
    copy {
        from fromFile
        into intoDir
        rename {
            fileName
        }
    }
    println(" after copy, file=" + intoFile.getAbsolutePath() + ", exists=" + intoFile.exists() + ", size=" + intoFile.length())
}

def copyPath(String srcPath, String dstPath) {
    println("srcPath:" + srcPath)
    println("dstPath:" + dstPath)
    def srcFile = new File(srcPath)
    for (File file : srcFile.listFiles()) {
        def name = file.getName()
        def dstName = pathJoin(dstPath, name)
        println("file:" + file.getAbsolutePath() + ",name=" + name)
        println("dstName:" + dstName)
        if (file.isFile()) {
            copy {
                from file.getAbsolutePath()
                into dstPath
                rename {
                    name
                }
            }
        } else {
            def newPath = new File(dstName)
            if (!newPath.exists()) {
                newPath.mkdirs()
            }
            copyPath(file.getAbsolutePath(), dstName)
        }
    }
}

def delPath(String path) {
    def dir = new File(path)
    def files = dir.listFiles()
    for (File file : files) {
        if (file.isFile()) {
            file.delete()
        } else {
            delPath(file.getAbsolutePath())
            file.delete()
        }
    }
}

def repackAAR(String path, String aarFile) {
    def cmd = "jar cvfM " + aarFile + " -C " + path + " ."
    println("command:" + cmd)
    println(cmd.execute().text.trim())
    def newShellFile = new File(aarFile)
    println("file=" + newShellFile.getAbsolutePath() + ", exists=" + newShellFile.exists() + ", size=" + newShellFile.length())
}

build.dependsOn([':mkstubs:build', ':libzip:build'])

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        println("step 1: copy jar file to sdk directory=======================")
        def rootDir = getRootDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def sdkDir = pathJoin(rootDir, sdkFolder) + File.separator
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def libDir = pathJoin(sdkDir, "libs")

        def fromDir = pathJoin(buildDir, "libs")
        def fromFile = pathJoin(fromDir, fileName)
        def jarName = "libmix.jar"

        //copy jar file to output directory
        copyFile(fromFile, sdkDir, jarName, true)

        println("step 2: unzip sdk aar=======================")
        //unzip sdk aar
        jarName = "libzip.jar"
        def jarFile = pathJoin(sdkDir, jarName)
        def sdkFile = pathJoin(sdkDir, sdkAarName)
        def sdkUnzipPath = pathJoin(sdkDir, "sdk") + File.separator
        delPath(sdkUnzipPath)
        unzip(jarFile, libDir, sdkFile, sdkUnzipPath)
        sleep(1000)
        println("step 3: unzip shell aar=======================")
        //unzip sdk aar
        def shellFile = pathJoin(sdkDir, shellAarName)
        def shellUnzipPath = sdkDir + "shell" + File.separator
        delPath(shellUnzipPath)
        unzip(jarFile, libDir, shellFile, shellUnzipPath)
        sleep(1000)

        println("step 4: merge sdk so to shell=======================")
        def sdkJni = pathJoin(sdkUnzipPath, "jni")
        def shellJni = pathJoin(shellUnzipPath, "jni")
        copyPath(sdkJni, shellJni)

        println("step 5: copy sdk jar to sdk directory=======================")
        //copy jar in aar to sdk directory
        def jarInAar = pathJoin(sdkUnzipPath, "classes.jar")
        copyFile(jarInAar, sdkDir, sdkJarName, true)
        def dexJarFile = pathJoin(sdkDir, sdkJarName)

        println("step 6: transform sdk jar to dex=======================")
        //transform sdk jar to dex
        def dex2jarFile = pathJoin(dex2jarDir, (isWindows() ? "d2j-jar2dex.bat" : "d2j-jar2dex.sh"))
        def dexFile = pathJoin(sdkDir, sdkDexName)
        jar2dex(dex2jarFile, dexJarFile, dexFile)
        println("dexFile=" + dexFile + ", exists=" + (new File(dexFile).exists()))

        println("step 7: generate stub sdk and repack stub sdk aar, then copy to demo libs=======================")
        //exec command to generate source code of stub sdk
        def stubJarName = sdkAarName.replace(".aar", ".jar")
        def mkstubsJarFile = pathJoin(sdkDir, "mkstubs.jar")
        def stubJarFile = pathJoin(sdkDir, stubJarName)
        println("jarFile=" + jarFile + ", exists=" + (new File(jarFile).exists()))
        println("dexJarFile=" + dexJarFile)
        println("stubJarFile=" + stubJarFile)
        jar2stub(mkstubsJarFile, libDir, mkstubsConf, dexJarFile, jarInAar)

        def newSdkAar = pathJoin(sdkDir, "sdk_new.aar")
        repackAAR(sdkUnzipPath, newSdkAar)

        println("step 8: mix dex and repack shell aar=======================")
        //exec command to mix dex file
        jarName = "libmix.jar"
        jarFile = sdkDir + jarName
        def srcFile = pathJoin(sdkDir, sdkDexName)
        def dstFile = pathJoin(sdkDir, sdkMixName)
        def command = "java -jar " + jarFile + " -en -s " + srcFile + " -d " + dstFile
        println("command:" + command)
        command.execute()

        //copy mixed dex file to shell/assets for using of repack aar
        def intoDir = pathJoin(sdkDir, "shell/assets/")
        copyFile(dstFile, intoDir, sdkMixName, true)

        def newShellAar = pathJoin(sdkDir, "libshell_new.aar")
        repackAAR(shellUnzipPath, newShellAar)

        println("step 9: copy new aar to the demo libs folder=======================")
        //copy new aar to demo
        copyFile(newSdkAar, demoLibFolder, sdkAarName, true)
        copyFile(newShellAar, demoLibFolder, shellAarName, true)

        println("=====================" + taskName + " doLast end.=========================")
    }
}
