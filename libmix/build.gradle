apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "8"
targetCompatibility = "8"

ext {
    sdkJarName = "${SDK_JAR_NAME}"
    sdkDexName = "${SDK_DEX_NAME}"
    sdkMixName = "${SDK_MIX_NAME}"
    sdkFolder = "${SDK_FOLDER}"
    shellAarName = "${SHELL_NAME}"
    demoLibFolder = "${DEMO_LIB_FOLDER}"
}

jar {
    //项目名，也是生成的jar的名字
    baseName = "libmix"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libmix.Mix' }
}

task clearJar(type: Delete) {
    println("=====================task clearJar start.=========================")
    delete 'build/libs/'
    println("=====================task clearJar start.=========================")
}

def copyFile(String fromFile, String intoDir, String fileName) {
    def intoFileName = intoDir + fileName
    def intoFile = new File(intoFileName)
    if (intoFile.exists()) {
        intoFile.delete()
    }
    println("fromFile=" + fromFile + ", exists=" + (new File(fromFile).exists()))
    println("intoDir=" + intoDir)
    println("fileName=" + fileName)
    println("before copy, file=" + intoFile.getAbsolutePath() + ", exists=" + intoFile.exists())
    copy {
        from fromFile
        into intoDir
        rename {
            fileName
        }
    }
    println(" after copy, file=" + intoFile.getAbsolutePath() + ", exists=" + intoFile.exists() + ", size=" + intoFile.length())
}

def repackAAR(String path, String aarFile) {
    def cmd = "jar cvfM " + aarFile + " -C " + path + " ."
    println("command:" + cmd)
    cmd.execute()
}

build {
    def taskName = getProject().getName() + " " + getName()
    doLast {
        println("=====================" + taskName + " doLast start.=======================")
        def rootDir = getRootDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def fromDir = buildDir + File.separator + "libs" + File.separator
        def fromFile = fromDir + fileName
        def sdkDir = rootDir + File.separator + sdkFolder + File.separator
        def jarName = "libmix.jar"

        //copy jar file to output directory
        copyFile(fromFile, sdkDir, jarName)

        //exec command to mix dex file
        def jarFile = sdkDir + jarName
        def srcFile = sdkDir + sdkDexName
        def dstFile = sdkDir + sdkMixName
        def command = "java -jar " + jarFile + " -en -s " + srcFile + " -d " + dstFile
        println("command:" + command)
        command.execute()

        //copy mixed dex file to shell/assets for using of repack aar
        def intoDir = sdkDir + "shell/assets/"
        copyFile(dstFile, intoDir, sdkMixName)

        def shellDir = sdkDir + "shell"
        def newShellAar = sdkDir + "libshell_new.aar"
        repackAAR(shellDir, newShellAar)
        def newShellFile = new File(newShellAar)
        println("file=" + newShellFile.getAbsolutePath() + ", exists=" + newShellFile.exists() + ", size=" + newShellFile.length())

        sleep(1000)
        //copy new aar to demo
        copyFile(newShellFile.getAbsolutePath(), demoLibFolder, shellAarName)

        println("=====================" + taskName + " doLast end.=========================")
    }
}
