apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
}

sourceCompatibility = "8"
targetCompatibility = "8"

jar {
    //项目名，也是生成的jar的名字
    baseName = "libsag"
    //项目版本号，这部分内容会写进manifest
    version = "1.0"
    //项目的manifest定义，其中就包含最关键的入口类定义
    manifest { attributes 'Main-Class': 'com.lxzh123.libsag.Main' }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

task prepare() {
    def proName = getProject().getName()
    println("=====================" + proName + " task prepare start.=========================")
    println("=====================" + proName + " task prepare end.=========================")
}

task makeJar(type: Copy, dependsOn: ':libmix:packageReleaseJar') {
    println("=====================task makeJar start.=========================")
    //copy jar file to output directory
    def projectDir = getProjectDir().getAbsolutePath()
    def buildDir = getBuildDir().getAbsolutePath()
    def fileName = jar.baseName + "-" + jar.version + ".jar"
    def fromFile = buildDir + File.separator + "libs" + File.separator + fileName
    def intoDir = projectDir + File.separator + "output" + File.separator
    def jarName = "libsag.jar"
    println("=====================build.doLast start.=========================")
    copy {
        from fromFile
        into intoDir
        rename {
            jarName
        }
    }
    println("=====================task makeJar end.=========================")
}

task genStubSdk(dependsOn: ':libsag:makeJar') {
    println("=====================task genStubSdk start.=========================")
    def projectDir = getProjectDir().getAbsolutePath()
    def jarDir = projectDir + File.separator + "output" + File.separator
    def jarName = "libsag.jar"
    def dexJarName = "libcore.jar"

    //exec command to generate source code of stub sdk
    def jarFile = jarDir + jarName
    def dexJarFile = jarDir + dexJarName
    def command = "java -jar " + jarFile + " " + dexJarFile
    println("command:" + command)
    command.execute()
    println("=====================task genStubSdk end.=========================")
}

//genStubSdk dependsOn: makeJar
build {
    doLast {
        //copy jar file to output directory
        def projectDir = getProjectDir().getAbsolutePath()
        def buildDir = getBuildDir().getAbsolutePath()
        def fileName = jar.baseName + "-" + jar.version + ".jar"
        def fromFile = buildDir + File.separator + "libs" + File.separator + fileName
        def jarDir = projectDir + File.separator + "output" + File.separator
        def jarName = "libsag.jar"
        println("=====================build.doLast start.=========================")
        copy {
            from fromFile
            into jarDir
            rename {
                jarName
            }
        }
        //exec command to generate source code of stub sdk
        def dexJarName = "libcore.jar"
        def jarFile = jarDir + jarName
        def dexJarFile = jarDir + dexJarName
        println("jarFile=" + jarFile)
        println("dexJarFile=" + dexJarFile)
        def command = "java -jar " + jarFile + " " + dexJarFile
        println("command:" + command)
        command.execute()
        println("=====================build.doLast success.=========================")
    }
}
