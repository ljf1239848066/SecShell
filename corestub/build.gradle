apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            libraryVariants.all { variant ->
//                variant.outputs.all { output ->
//                    def fileName
//                    if (variant.buildType.name.equals('release')) {
//                        fileName = "corestub-release.aar"
//                    } else if (variant.buildType.name.equals('debug')) {
//                        fileName = "corestub-debug.aar"
//                    }
//                    outputFileName = fileName
//                }
//            }
//            libraryVariants.whenObjectAdded { variant ->
//                variant.outputs.all { output ->
//                    println("variant:" + variant)
//                    println("variant.outputs:" + variant.outputs)
//                    println("variant.buildType:" + variant.buildType)
//                    println("variant.buildType.name:" + variant.buildType.name)
//                    def fileName = "corestub.aar"
//                    outputFileName = fileName
//                }
//            }
        }
    }
}

def copyAAR(String fromFile, String intoDir, String aarName) {
    def intoFile = intoDir + aarName
    delete intoFile
    println("fromFile=" + fromFile)
    println("intoDir=" + intoDir)
    println("aarName=" + aarName)
    println("fromFile:" + fromFile + ", exists=" + (new File(fromFile).exists()))
    copy {
        from fromFile
        into intoDir
        rename {
            aarName
        }
    }
    def newFile = new File(intoFile)
    println("aar:" + newFile.getAbsolutePath() + ", exists=" + newFile.exists())
}

def static getFileCount(String path) {
    def file = new File(path)
    def files = file.listFiles()
    def total = 0
    if (files != null) {
        def len = files.length
        for (int i = 0; i < len; i++) {
            if (files[i].directory) {
                total += getFileCount(files[i].absolutePath)
            } else {
                total++
            }
        }
    }
    return total
}

build {
    def proName = getProject().getName()
    doLast {
        println("=====================" + proName + " task build.doLast start.=======================")
        def rootProjectpath = getRootDir().absolutePath
        def srcFileDir = getProjectDir().absolutePath + "/src/main/java/"
        def fileCnt = getFileCount(srcFileDir)
        println("fileCnt=" + fileCnt)
        def buildDir = getBuildDir().getAbsolutePath()
        def fromFile = buildDir + "/outputs/aar/corestub-release.aar"
        def intoDir = rootProjectpath + "/demo/geetestsdk/"
        def aarName = "corestub.aar"
        copyAAR(fromFile, intoDir, aarName)
        println("=====================" + proName + " task build.doLast end.=========================")
    }
}

build.dependsOn([':libsag:build'])

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
